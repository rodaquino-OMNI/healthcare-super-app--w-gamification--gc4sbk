/**
 * Medical Event Interface and Validation Schema
 * 
 * This file defines the MedicalEvent interface and its corresponding Zod validation schema
 * for the AUSTA SuperApp Health Journey. Medical events represent significant occurrences
 * in a user's health history, such as doctor visits, diagnoses, procedures, and treatments.
 * 
 * The interface and schema ensure data integrity through runtime type checking and validation,
 * which is critical for maintaining accurate medical history records and supporting the
 * medical history timeline feature in the Health Journey.
 */

import { z } from 'zod';

/**
 * Types of medical events that can be tracked in the Health Journey
 * Based on standard healthcare documentation practices
 */
export enum MedicalEventType {
  DOCTOR_VISIT = 'DOCTOR_VISIT',
  DIAGNOSIS = 'DIAGNOSIS',
  PROCEDURE = 'PROCEDURE',
  HOSPITALIZATION = 'HOSPITALIZATION',
  VACCINATION = 'VACCINATION',
  MEDICATION_CHANGE = 'MEDICATION_CHANGE',
  LAB_TEST = 'LAB_TEST',
  IMAGING = 'IMAGING',
  SPECIALIST_REFERRAL = 'SPECIALIST_REFERRAL',
  OTHER = 'OTHER',
}

/**
 * Represents a significant medical event in a user's health history
 * 
 * Medical events are used to build a comprehensive medical history timeline
 * in the Health Journey, allowing users to track and review their healthcare
 * interactions over time.
 */
export interface MedicalEvent {
  /**
   * Unique identifier for the medical event
   * Generated by the backend when the event is created
   */
  id: string;

  /**
   * Identifier of the user this medical event belongs to
   * Used for data segregation and access control
   */
  userId: string;

  /**
   * Type of medical event
   * Categorizes the event for filtering and organization in the timeline
   */
  type: MedicalEventType | string;

  /**
   * Detailed description of the medical event
   * May include symptoms, diagnoses, treatment details, or other relevant information
   */
  description: string;

  /**
   * Date and time when the medical event occurred
   * Stored in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ)
   */
  date: string;

  /**
   * Healthcare provider associated with this medical event
   * May include doctor name, hospital, clinic, or other healthcare facility
   */
  provider: string;

  /**
   * Array of document references related to this medical event
   * May include URLs, file paths, or identifiers for medical records, test results,
   * prescriptions, or other supporting documentation
   */
  documents: string[];
}

/**
 * Zod schema for validating medical event data
 * 
 * This schema ensures data consistency and integrity for the medical history timeline
 * by validating all properties of a MedicalEvent object at runtime.
 */
export const medicalEventSchema = z.object({
  id: z.string().uuid({
    message: 'Medical event ID must be a valid UUID',
  }),
  userId: z.string().uuid({
    message: 'User ID must be a valid UUID',
  }),
  type: z.union([
    z.nativeEnum(MedicalEventType),
    z.string().min(1, {
      message: 'Medical event type cannot be empty',
    }),
  ]),
  description: z.string().min(1, {
    message: 'Medical event description cannot be empty',
  }).max(1000, {
    message: 'Medical event description cannot exceed 1000 characters',
  }),
  date: z.string().datetime({
    message: 'Medical event date must be a valid ISO 8601 datetime string',
  }),
  provider: z.string().min(1, {
    message: 'Healthcare provider cannot be empty',
  }).max(200, {
    message: 'Healthcare provider name cannot exceed 200 characters',
  }),
  documents: z.array(
    z.string().url({
      message: 'Document must be a valid URL',
    })
  ).max(20, {
    message: 'Cannot have more than 20 documents per medical event',
  }),
});

/**
 * Type for a validated medical event
 * Represents a MedicalEvent that has passed validation
 */
export type ValidatedMedicalEvent = z.infer<typeof medicalEventSchema>;