version: '3.8'

services:
  # API Gateway service - entry point for all client requests
  api-gateway:
    image: austa-api-gateway:latest
    build:
      context: .
      dockerfile: src/backend/api-gateway/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      API_URL: http://localhost:3000
      AUTH_SERVICE_URL: http://auth-service:3001
      HEALTH_SERVICE_URL: http://health-service:3002
      CARE_SERVICE_URL: http://care-service:3003
      PLAN_SERVICE_URL: http://plan-service:3004
      GAMIFICATION_ENGINE_URL: http://gamification-engine:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - auth-service
      - health-service
      - care-service
      - plan-service
      - gamification-engine
      - notification-service
      - redis
    networks:
      - austa-network

  # Authentication service - handles user authentication and authorization
  auth-service:
    image: austa-auth-service:latest
    build:
      context: .
      dockerfile: src/backend/auth-service/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=auth
      JWT_SECRET: ${JWT_SECRET:-austa_jwt_secret_must_be_changed_in_production}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
    networks:
      - austa-network

  # Health journey service - manages health metrics, goals, and device connections
  health-service:
    image: austa-health-service:latest
    build:
      context: .
      dockerfile: src/backend/health-service/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=health
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
      # Event schema validation
      AUSTA_EVENT_VALIDATION_ENABLED: ${AUSTA_EVENT_VALIDATION_ENABLED:-true}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - austa-network

  # Care journey service - manages appointments, medications, and providers
  care-service:
    image: austa-care-service:latest
    build:
      context: .
      dockerfile: src/backend/care-service/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=care
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
      # Event schema validation
      AUSTA_EVENT_VALIDATION_ENABLED: ${AUSTA_EVENT_VALIDATION_ENABLED:-true}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - austa-network

  # Plan journey service - manages insurance plans, benefits, and claims
  plan-service:
    image: austa-plan-service:latest
    build:
      context: .
      dockerfile: src/backend/plan-service/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=plan
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
      # Event schema validation
      AUSTA_EVENT_VALIDATION_ENABLED: ${AUSTA_EVENT_VALIDATION_ENABLED:-true}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3004/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - austa-network

  # Gamification engine - manages achievements, rewards, and user profiles
  gamification-engine:
    image: austa-gamification-engine:latest
    build:
      context: .
      dockerfile: src/backend/gamification-engine/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=gamification
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
      # Event schema validation
      AUSTA_EVENT_VALIDATION_ENABLED: ${AUSTA_EVENT_VALIDATION_ENABLED:-true}
      # Gamification specific settings
      AUSTA_ACHIEVEMENT_NOTIFICATION_ENABLED: ${AUSTA_ACHIEVEMENT_NOTIFICATION_ENABLED:-true}
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3005/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - austa-network

  # Notification service - manages user notifications across channels
  notification-service:
    image: austa-notification-service:latest
    build:
      context: .
      dockerfile: src/backend/notification-service/Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=notification
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      # Standardized environment variables
      AUSTA_LOG_LEVEL: ${AUSTA_LOG_LEVEL:-info}
      AUSTA_TRACING_ENABLED: ${AUSTA_TRACING_ENABLED:-false}
      # Package structure configuration
      AUSTA_PACKAGES_PATH: /app/node_modules
      # Event schema validation
      AUSTA_EVENT_VALIDATION_ENABLED: ${AUSTA_EVENT_VALIDATION_ENABLED:-true}
      # Notification specific settings
      AUSTA_NOTIFICATION_RETRY_ENABLED: ${AUSTA_NOTIFICATION_RETRY_ENABLED:-true}
      AUSTA_NOTIFICATION_RETRY_MAX_ATTEMPTS: ${AUSTA_NOTIFICATION_RETRY_MAX_ATTEMPTS:-3}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3006/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - austa-network

  # Development proxy - routes API and WebSocket traffic
  dev-proxy:
    image: nginx:1.21.6
    container_name: dev-proxy
    ports:
      - "8080:80"
    volumes:
      - ./infrastructure/docker/dev-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/dev-proxy/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api-gateway
    networks:
      - austa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Database seeding service - runs migrations and seed scripts on startup
  db-seed:
    image: austa-db-seed:latest
    build:
      context: .
      dockerfile: src/backend/shared/prisma/Dockerfile
    environment:
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa
      NODE_ENV: development
    depends_on:
      - postgres
    networks:
      - austa-network
    command: ["sh", "-c", "npm run prisma:migrate && npm run prisma:seed"]
    restart: on-failure

  # PostgreSQL database
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: austa
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-austa}
      POSTGRES_DB: austa
      # Connection optimization
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 1GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/db/postgres-init:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U austa"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # Redis for caching and session storage
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-austa_redis}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.2.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      # Improved reliability settings
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    depends_on:
      - zookeeper
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - austa-network

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # Improved reliability settings
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - api-gateway
      - auth-service
      - health-service
      - care-service
      - plan-service
      - gamification-engine
      - notification-service
    networks:
      - austa-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3100:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - austa-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  austa-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  prometheus_data:
  grafana_data: