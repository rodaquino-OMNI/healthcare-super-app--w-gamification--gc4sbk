/**
 * @file Base Event DTO
 * @description Defines the base DTO for all gamification events with common properties and validation rules.
 * This class serves as the foundation for journey-specific event DTOs and ensures consistent
 * validation across all event types in the system.
 */

import { Type } from 'class-transformer';
import {
  IsDate,
  IsEnum,
  IsNotEmpty,
  IsOptional,
  IsString,
  IsUUID,
  MaxLength,
  MinLength,
  ValidateNested,
} from 'class-validator';

// This will be imported from @austa/interfaces in the future
// import { JourneyType } from '@austa/interfaces/common/dto/journey.dto';

/**
 * Enum representing the different journey types in the system.
 * This will be replaced by importing from @austa/interfaces once available.
 */
export enum JourneyType {
  HEALTH = 'HEALTH',
  CARE = 'CARE',
  PLAN = 'PLAN',
}

/**
 * Base DTO class for all gamification events.
 * Contains common properties and validation rules that apply to all event types.
 * Journey-specific event DTOs should extend this class and add their own properties.
 */
export class BaseEventDto {
  /**
   * Optional unique identifier for the event.
   * If not provided, will be generated by the system.
   * @example "550e8400-e29b-41d4-a716-446655440000"
   */
  @IsOptional()
  @IsUUID(4, { message: 'Event ID must be a valid UUID v4' })
  id?: string;

  /**
   * The type of event that occurred.
   * Must be a non-empty string identifying the specific event type.
   * @example "APPOINTMENT_BOOKED", "HEALTH_GOAL_ACHIEVED", "CLAIM_SUBMITTED"
   */
  @IsNotEmpty({ message: 'Event type is required' })
  @IsString({ message: 'Event type must be a string' })
  @MaxLength(100, { message: 'Event type cannot exceed 100 characters' })
  type: string;

  /**
   * The user ID associated with this event.
   * Must be a non-empty string identifying the user who triggered the event.
   * @example "user_123456"
   */
  @IsNotEmpty({ message: 'User ID is required' })
  @IsString({ message: 'User ID must be a string' })
  @MinLength(3, { message: 'User ID must be at least 3 characters long' })
  @MaxLength(100, { message: 'User ID cannot exceed 100 characters' })
  userId: string;

  /**
   * Timestamp when the event occurred.
   * If not provided, will be set to the current time by the system.
   * @example "2023-04-15T14:32:17.000Z"
   */
  @IsOptional()
  @IsDate({ message: 'Timestamp must be a valid date' })
  @Type(() => Date)
  timestamp?: Date;

  /**
   * The journey context where the event originated.
   * Must be one of the defined journey types: HEALTH, CARE, or PLAN.
   * @example "HEALTH", "CARE", "PLAN"
   */
  @IsEnum(JourneyType, {
    message: 'Journey must be one of: HEALTH, CARE, PLAN',
  })
  journey: JourneyType;

  /**
   * The source service that generated this event.
   * Optional field identifying the specific service that created the event.
   * @example "health-service", "care-service", "plan-service"
   */
  @IsOptional()
  @IsString({ message: 'Source must be a string' })
  @MaxLength(100, { message: 'Source cannot exceed 100 characters' })
  source?: string;

  /**
   * Version of the event schema, used for backward compatibility.
   * Follows semantic versioning format (MAJOR.MINOR).
   * @example "1.0", "2.3"
   */
  @IsNotEmpty({ message: 'Version is required' })
  @IsString({ message: 'Version must be a string' })
  @MinLength(3, { message: 'Version must be at least 3 characters long' })
  @MaxLength(10, { message: 'Version cannot exceed 10 characters' })
  version: string = '1.0';

  /**
   * Event-specific payload data.
   * The structure varies based on the event type and journey.
   * Journey-specific DTOs will define their own data structure.
   */
  @IsNotEmpty({ message: 'Event data is required' })
  @ValidateNested({ message: 'Event data must be a valid object' })
  @Type(() => Object)
  data: Record<string, any>;

  /**
   * Constructor for creating a new BaseEventDto instance.
   * @param partial - Partial<BaseEventDto> object to initialize the DTO
   */
  constructor(partial?: Partial<BaseEventDto>) {
    if (partial) {
      Object.assign(this, partial);
      
      // Set default timestamp if not provided
      if (!this.timestamp) {
        this.timestamp = new Date();
      }
    }
  }
}