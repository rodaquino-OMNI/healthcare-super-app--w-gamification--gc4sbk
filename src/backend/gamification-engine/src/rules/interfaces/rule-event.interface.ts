import {
  GamificationEvent,
  EventType,
  JourneyType,
  HealthEventData,
  CareEventData,
  PlanEventData,
  EventVersion
} from '@austa/interfaces/gamification';

/**
 * Enum representing the source of a rule event.
 * This helps categorize events by their origin within the system.
 */
export enum RuleEventSource {
  /** Events generated by user actions in the application */
  USER_ACTION = 'USER_ACTION',
  /** Events generated by system processes or scheduled tasks */
  SYSTEM = 'SYSTEM',
  /** Events generated by external integrations (e.g., wearable devices) */
  INTEGRATION = 'INTEGRATION',
  /** Events generated by administrative actions */
  ADMIN = 'ADMIN'
}

/**
 * Interface for rule event metadata.
 * Contains additional information about the event that may be useful for rule processing
 * but is not part of the core event data.
 */
export interface IRuleEventMetadata {
  /** Timestamp when the event was created */
  timestamp: string;
  /** Source of the event */
  source: RuleEventSource;
  /** Optional correlation ID for tracking related events */
  correlationId?: string;
  /** Optional session ID for tracking events within a user session */
  sessionId?: string;
  /** Optional device information for events generated from mobile or web clients */
  device?: {
    /** Type of device (e.g., mobile, web, wearable) */
    type: string;
    /** Device model or browser information */
    model?: string;
    /** Operating system or platform */
    os?: string;
    /** Application version */
    appVersion?: string;
  };
  /** Optional location information for location-based events */
  location?: {
    /** Latitude coordinate */
    latitude: number;
    /** Longitude coordinate */
    longitude: number;
    /** Accuracy of the location in meters */
    accuracy?: number;
  };
  /** Additional custom properties specific to the event */
  [key: string]: any;
}

/**
 * Base interface for all rule events in the gamification engine.
 * Extends the GamificationEvent from @austa/interfaces with additional
 * properties specific to rule processing.
 */
export interface IRuleEvent extends GamificationEvent {
  /** Metadata containing additional information about the event */
  metadata: IRuleEventMetadata;
  /** Flag indicating whether this event has been processed by rules engine */
  processed?: boolean;
  /** Timestamp when the event was processed by the rules engine */
  processedAt?: string;
  /** Results of rule processing, if any */
  processingResults?: {
    /** Number of rules that matched this event */
    matchedRules: number;
    /** Number of points awarded as a result of this event */
    pointsAwarded: number;
    /** IDs of achievements that were progressed or unlocked */
    achievementIds?: string[];
    /** IDs of quests that were progressed or completed */
    questIds?: string[];
  };
}

/**
 * Interface for health journey rule events.
 * Contains health-specific data and enforces the journey type.
 */
export interface IHealthRuleEvent extends IRuleEvent {
  /** The journey type, fixed to HEALTH for this interface */
  journey: JourneyType.HEALTH;
  /** Health-specific event data */
  data: HealthEventData;
  /** Event types that are valid for health journey */
  type: EventType.HEALTH_METRIC_RECORDED | 
        EventType.HEALTH_GOAL_CREATED | 
        EventType.HEALTH_GOAL_UPDATED | 
        EventType.HEALTH_GOAL_COMPLETED | 
        EventType.DEVICE_CONNECTED | 
        EventType.HEALTH_INSIGHT_VIEWED;
}

/**
 * Interface for care journey rule events.
 * Contains care-specific data and enforces the journey type.
 */
export interface ICareRuleEvent extends IRuleEvent {
  /** The journey type, fixed to CARE for this interface */
  journey: JourneyType.CARE;
  /** Care-specific event data */
  data: CareEventData;
  /** Event types that are valid for care journey */
  type: EventType.APPOINTMENT_BOOKED | 
        EventType.APPOINTMENT_COMPLETED | 
        EventType.MEDICATION_TRACKED | 
        EventType.TELEMEDICINE_SESSION_STARTED | 
        EventType.TELEMEDICINE_SESSION_COMPLETED | 
        EventType.SYMPTOM_CHECKED;
}

/**
 * Interface for plan journey rule events.
 * Contains plan-specific data and enforces the journey type.
 */
export interface IPlanRuleEvent extends IRuleEvent {
  /** The journey type, fixed to PLAN for this interface */
  journey: JourneyType.PLAN;
  /** Plan-specific event data */
  data: PlanEventData;
  /** Event types that are valid for plan journey */
  type: EventType.CLAIM_SUBMITTED | 
        EventType.CLAIM_APPROVED | 
        EventType.BENEFIT_VIEWED | 
        EventType.PLAN_SELECTED | 
        EventType.DOCUMENT_UPLOADED;
}

/**
 * Union type for all journey-specific rule events.
 * This type can be used when the specific journey is not known at compile time.
 */
export type JourneyRuleEvent = IHealthRuleEvent | ICareRuleEvent | IPlanRuleEvent;

/**
 * Interface for rule event context.
 * This context is passed to rule evaluation functions and contains
 * the event data along with additional context needed for rule evaluation.
 */
export interface IRuleEventContext {
  /** The rule event being evaluated */
  event: IRuleEvent;
  /** The user's game profile */
  userProfile: any; // This would be replaced with the actual user profile interface
  /** The current timestamp for time-based rules */
  timestamp: string;
  /** Additional context data that may be needed for rule evaluation */
  context?: Record<string, any>;
}

/**
 * Interface for rule event processing options.
 * These options control how events are processed by the rules engine.
 */
export interface IRuleEventProcessingOptions {
  /** Whether to process events asynchronously */
  async?: boolean;
  /** Maximum number of rules to evaluate for this event */
  maxRules?: number;
  /** Whether to continue processing after the first matching rule */
  continueOnMatch?: boolean;
  /** Timeout in milliseconds for rule evaluation */
  timeout?: number;
  /** Whether to retry failed rule evaluations */
  retry?: {
    /** Maximum number of retry attempts */
    maxAttempts: number;
    /** Delay between retry attempts in milliseconds */
    delay: number;
    /** Whether to use exponential backoff for retries */
    exponentialBackoff?: boolean;
  };
  /** Dead letter queue options for failed events */
  deadLetterQueue?: {
    /** Whether to send failed events to the dead letter queue */
    enabled: boolean;
    /** Topic or queue name for the dead letter queue */
    destination: string;
  };
}

/**
 * Interface for rule event processing result.
 * Contains the results of processing an event through the rules engine.
 */
export interface IRuleEventProcessingResult {
  /** The original event that was processed */
  event: IRuleEvent;
  /** Whether the event was successfully processed */
  success: boolean;
  /** Error message if processing failed */
  error?: string;
  /** Number of rules that matched this event */
  matchedRules: number;
  /** Number of points awarded as a result of this event */
  pointsAwarded: number;
  /** Achievements that were progressed or unlocked */
  achievements?: {
    /** ID of the achievement */
    id: string;
    /** New progress value */
    progress: number;
    /** Whether the achievement was unlocked */
    unlocked: boolean;
  }[];
  /** Quests that were progressed or completed */
  quests?: {
    /** ID of the quest */
    id: string;
    /** New progress value */
    progress: number;
    /** Whether the quest was completed */
    completed: boolean;
  }[];
  /** Processing time in milliseconds */
  processingTime: number;
  /** Timestamp when processing completed */
  timestamp: string;
}