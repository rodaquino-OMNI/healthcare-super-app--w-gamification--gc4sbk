version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: gamification-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gamification
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: gamification-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    container_name: gamification-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.2.0
    container_name: gamification-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  kafka-setup:
    image: confluentinc/cp-kafka:7.2.0
    container_name: gamification-kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c '
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:9092 1 30
        echo "Creating topics..."
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic health.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic care.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic plan.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic gamification.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic reward.events --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic quest.events --partitions 3 --replication-factor 1
        echo "Topics created."
      '
    restart: on-failure

  kafdrop:
    image: obsidiandynamics/kafdrop:3.31.0
    container_name: gamification-kafdrop
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx128M"
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  db-seed:
    image: node:18-alpine
    container_name: gamification-db-seed
    working_dir: /app
    volumes:
      - ../../..:/app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/gamification
      NODE_ENV: development
    command: >
      sh -c '
        cd src/backend/gamification-engine && 
        echo "Generating Prisma client..." && 
        npx prisma generate && 
        echo "Running migrations..." && 
        npx prisma migrate deploy && 
        echo "Seeding database..." && 
        npx prisma db seed && 
        echo "Database setup complete."
      '
    restart: on-failure

  gamification-engine:
    image: node:18-alpine
    container_name: gamification-engine
    working_dir: /app
    volumes:
      - ../../..:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      db-seed:
        condition: service_completed_successfully
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/gamification
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_TTL: 3600
      KAFKA_BROKER: kafka:9092
      KAFKA_GROUP_ID: gamification-engine-group
      KAFKA_CLIENT_ID: gamification-engine
      KAFKA_HEALTH_TOPIC: health.events
      KAFKA_CARE_TOPIC: care.events
      KAFKA_PLAN_TOPIC: plan.events
      KAFKA_USER_TOPIC: user.events
      KAFKA_GAMIFICATION_TOPIC: gamification.events
      KAFKA_REWARD_TOPIC: reward.events
      KAFKA_QUEST_TOPIC: quest.events
      JWT_SECRET: local-development-secret
      JWT_EXPIRES_IN: 3600s
      LOG_LEVEL: debug
      ENABLE_SWAGGER: "true"
    ports:
      - "3005:3005"
    command: >
      sh -c '
        cd src/backend/gamification-engine && 
        npm install && 
        npm run start:dev
      '
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    name: gamification-postgres-data
  redis_data:
    name: gamification-redis-data