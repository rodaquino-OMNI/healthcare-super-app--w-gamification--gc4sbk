/**
 * @file Kafka topic name constants for the AUSTA SuperApp.
 * 
 * This file centralizes all Kafka topic name constants used across the healthcare super app,
 * creating a single source of truth for event stream topics. It ensures consistent topic naming
 * between producers and consumers, preventing misconfiguration and message routing issues.
 * 
 * @module events/constants/topics
 */

import { JourneyTypes } from './types.constants';

/**
 * Base topic names for each journey and cross-cutting concern.
 * 
 * These constants define the standard topic names used for event streaming
 * across the AUSTA SuperApp. Each journey has its own dedicated topic to
 * ensure proper event routing and processing.
 */

/**
 * Health Journey events topic.
 * 
 * This topic carries events related to the "Minha Saúde" journey, including
 * health metric recording, goal management, device integration, and health insights.
 * 
 * @example
 * // Publishing a health metric event
 * kafkaService.publish(HEALTH_EVENTS, {
 *   type: HealthEventTypes.METRIC_RECORDED,
 *   userId: '123',
 *   data: { metricType: 'weight', value: 70.5, unit: 'kg' }
 * });
 */
export const HEALTH_EVENTS = 'health.events';

/**
 * Care Journey events topic.
 * 
 * This topic carries events related to the "Cuidar-me Agora" journey, including
 * appointment management, medication tracking, telemedicine sessions, and treatment plans.
 * 
 * @example
 * // Publishing an appointment booking event
 * kafkaService.publish(CARE_EVENTS, {
 *   type: CareEventTypes.APPOINTMENT_BOOKED,
 *   userId: '123',
 *   data: { appointmentId: '456', appointmentType: 'checkup' }
 * });
 */
export const CARE_EVENTS = 'care.events';

/**
 * Plan Journey events topic.
 * 
 * This topic carries events related to the "Meu Plano & Benefícios" journey, including
 * claim management, benefit utilization, and plan selection.
 * 
 * @example
 * // Publishing a claim submission event
 * kafkaService.publish(PLAN_EVENTS, {
 *   type: PlanEventTypes.CLAIM_SUBMITTED,
 *   userId: '123',
 *   data: { claimId: '789', claimType: 'medical', amount: 150.00 }
 * });
 */
export const PLAN_EVENTS = 'plan.events';

/**
 * User-related events topic.
 * 
 * This topic carries cross-journey events related to user profile and account management,
 * including profile updates, feedback, and survey completion.
 * 
 * @example
 * // Publishing a profile update event
 * kafkaService.publish(USER_EVENTS, {
 *   type: UserEventTypes.PROFILE_UPDATED,
 *   userId: '123',
 *   data: { updatedFields: ['address', 'phoneNumber'] }
 * });
 */
export const USER_EVENTS = 'user.events';

/**
 * Gamification events topic.
 * 
 * This topic carries events generated by the gamification engine in response to user actions,
 * including achievement unlocking, quest completion, and level progression.
 * 
 * @example
 * // Publishing an achievement unlocked event
 * kafkaService.publish(GAMIFICATION_EVENTS, {
 *   type: GamificationEventTypes.ACHIEVEMENT_UNLOCKED,
 *   userId: '123',
 *   data: { achievementId: '101', achievementTitle: 'Health Enthusiast' }
 * });
 */
export const GAMIFICATION_EVENTS = 'game.events';

/**
 * Versioned topic names for backward compatibility.
 * 
 * These constants provide versioned topic names that can be used when
 * implementing breaking changes to event schemas. By publishing to both
 * the current and new versioned topics during a transition period, consumers
 * can be migrated gradually without service disruption.
 */
export const VERSIONED_TOPICS = {
  /**
   * Health Journey events with version suffix.
   * Use these constants when implementing breaking changes to health event schemas.
   */
  HEALTH: {
    /** Version 1 of the health events topic (current) */
    V1: `${HEALTH_EVENTS}.v1`,
    /** Version 2 of the health events topic (for future use) */
    V2: `${HEALTH_EVENTS}.v2`,
  },
  
  /**
   * Care Journey events with version suffix.
   * Use these constants when implementing breaking changes to care event schemas.
   */
  CARE: {
    /** Version 1 of the care events topic (current) */
    V1: `${CARE_EVENTS}.v1`,
    /** Version 2 of the care events topic (for future use) */
    V2: `${CARE_EVENTS}.v2`,
  },
  
  /**
   * Plan Journey events with version suffix.
   * Use these constants when implementing breaking changes to plan event schemas.
   */
  PLAN: {
    /** Version 1 of the plan events topic (current) */
    V1: `${PLAN_EVENTS}.v1`,
    /** Version 2 of the plan events topic (for future use) */
    V2: `${PLAN_EVENTS}.v2`,
  },
  
  /**
   * User-related events with version suffix.
   * Use these constants when implementing breaking changes to user event schemas.
   */
  USER: {
    /** Version 1 of the user events topic (current) */
    V1: `${USER_EVENTS}.v1`,
    /** Version 2 of the user events topic (for future use) */
    V2: `${USER_EVENTS}.v2`,
  },
  
  /**
   * Gamification events with version suffix.
   * Use these constants when implementing breaking changes to gamification event schemas.
   */
  GAMIFICATION: {
    /** Version 1 of the gamification events topic (current) */
    V1: `${GAMIFICATION_EVENTS}.v1`,
    /** Version 2 of the gamification events topic (for future use) */
    V2: `${GAMIFICATION_EVENTS}.v2`,
  },
};

/**
 * Namespace organization for topic constants.
 * 
 * These namespaces provide a structured way to access topic constants,
 * improving code organization and discoverability through IDE autocompletion.
 */
export namespace Topics {
  /** Health Journey event topics */
  export namespace Health {
    /** Main health events topic */
    export const EVENTS = HEALTH_EVENTS;
    /** Versioned health event topics */
    export const VERSIONED = VERSIONED_TOPICS.HEALTH;
  }
  
  /** Care Journey event topics */
  export namespace Care {
    /** Main care events topic */
    export const EVENTS = CARE_EVENTS;
    /** Versioned care event topics */
    export const VERSIONED = VERSIONED_TOPICS.CARE;
  }
  
  /** Plan Journey event topics */
  export namespace Plan {
    /** Main plan events topic */
    export const EVENTS = PLAN_EVENTS;
    /** Versioned plan event topics */
    export const VERSIONED = VERSIONED_TOPICS.PLAN;
  }
  
  /** User-related event topics */
  export namespace User {
    /** Main user events topic */
    export const EVENTS = USER_EVENTS;
    /** Versioned user event topics */
    export const VERSIONED = VERSIONED_TOPICS.USER;
  }
  
  /** Gamification event topics */
  export namespace Gamification {
    /** Main gamification events topic */
    export const EVENTS = GAMIFICATION_EVENTS;
    /** Versioned gamification event topics */
    export const VERSIONED = VERSIONED_TOPICS.GAMIFICATION;
  }
}

/**
 * Maps journey types to their corresponding event topics.
 * 
 * This mapping enables journey-specific topic resolution for event publishing.
 */
export const JOURNEY_TOPICS = {
  [JourneyTypes.HEALTH]: HEALTH_EVENTS,
  [JourneyTypes.CARE]: CARE_EVENTS,
  [JourneyTypes.PLAN]: PLAN_EVENTS,
  [JourneyTypes.CROSS_JOURNEY]: USER_EVENTS,
};

/**
 * All topic names as a flat array for easy iteration.
 * 
 * This constant provides a convenient way to access all topic names
 * for configuration and validation purposes.
 */
export const ALL_TOPICS = [
  HEALTH_EVENTS,
  CARE_EVENTS,
  PLAN_EVENTS,
  USER_EVENTS,
  GAMIFICATION_EVENTS,
  ...Object.values(VERSIONED_TOPICS.HEALTH),
  ...Object.values(VERSIONED_TOPICS.CARE),
  ...Object.values(VERSIONED_TOPICS.PLAN),
  ...Object.values(VERSIONED_TOPICS.USER),
  ...Object.values(VERSIONED_TOPICS.GAMIFICATION),
];

/**
 * Checks if a given string is a valid topic name.
 * 
 * @param topic - The string to check
 * @returns True if the string is a valid topic name, false otherwise
 */
export function isValidTopic(topic: string): boolean {
  return ALL_TOPICS.includes(topic);
}

/**
 * Gets the appropriate topic for a specific journey.
 * 
 * @param journey - The journey type to get the topic for
 * @returns The topic name associated with the journey
 */
export function getTopicForJourney(journey: JourneyTypes): string {
  return JOURNEY_TOPICS[journey] || USER_EVENTS;
}

/**
 * Gets the versioned topic for a specific journey and version.
 * 
 * @param journey - The journey type to get the topic for
 * @param version - The version number (1 or 2)
 * @returns The versioned topic name, or the default topic if version is invalid
 */
export function getVersionedTopic(journey: JourneyTypes, version: 1 | 2): string {
  const versionKey = `V${version}` as 'V1' | 'V2';
  
  switch (journey) {
    case JourneyTypes.HEALTH:
      return VERSIONED_TOPICS.HEALTH[versionKey];
    case JourneyTypes.CARE:
      return VERSIONED_TOPICS.CARE[versionKey];
    case JourneyTypes.PLAN:
      return VERSIONED_TOPICS.PLAN[versionKey];
    case JourneyTypes.CROSS_JOURNEY:
      return VERSIONED_TOPICS.USER[versionKey];
    default:
      return getTopicForJourney(journey);
  }
}