import { IsString, IsNotEmpty, IsJWT, Length, Matches } from 'class-validator';

/**
 * Data Transfer Object for Multi-Factor Authentication verification requests.
 * 
 * This DTO validates requests containing a temporary token and verification code
 * used to complete the second factor of authentication. The temporary token is
 * issued after the first authentication factor (usually username/password) is
 * successfully validated, and the verification code is sent to the user through
 * a separate channel (SMS, email, or authenticator app).
 */
export class MfaVerificationDto {
  /**
   * Temporary JWT token issued after successful first-factor authentication.
   * This token contains the user's identity and MFA method, but has limited
   * permissions and a short expiration time (typically 5 minutes).
   * 
   * @example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
   */
  @IsString({ message: 'Temporary token must be a string' })
  @IsNotEmpty({ message: 'Temporary token is required' })
  @IsJWT({ message: 'Invalid temporary token format' })
  temporaryToken: string;

  /**
   * Verification code sent to the user via SMS, email, or generated by an
   * authenticator app. This code is used to verify possession of the second
   * authentication factor.
   * 
   * @example "123456"
   */
  @IsString({ message: 'Verification code must be a string' })
  @IsNotEmpty({ message: 'Verification code is required' })
  @Length(6, 6, { message: 'Verification code must be exactly 6 characters' })
  @Matches(/^\d+$/, { message: 'Verification code must contain only digits' })
  verificationCode: string;
}