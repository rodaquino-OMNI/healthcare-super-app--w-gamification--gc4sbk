import { IsNotEmpty, IsString, Length, Matches } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

/**
 * Data Transfer Object for Multi-Factor Authentication verification requests.
 * 
 * This DTO validates requests containing a temporary token and verification code
 * for implementing the second authentication factor, enhancing security for
 * sensitive operations by requiring a verification code sent through a separate
 * channel (SMS, email, or authenticator app).
 */
export class MfaVerificationDto {
  /**
   * Temporary token issued during the initial authentication step.
   * This token is used to associate the verification request with the user's session.
   */
  @ApiProperty({
    description: 'Temporary token issued during the initial authentication step',
    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwiaWF0IjoxNTE2MjM5MDIyfQ',
  })
  @IsString({ message: 'Temporary token must be a string' })
  @IsNotEmpty({ message: 'Temporary token is required' })
  temporaryToken: string;

  /**
   * Verification code sent to the user via SMS, email, or generated by an authenticator app.
   * Typically a 6-digit numeric code, but can be configured differently based on the MFA method.
   */
  @ApiProperty({
    description: 'Verification code sent to the user via SMS, email, or generated by an authenticator app',
    example: '123456',
  })
  @IsString({ message: 'Verification code must be a string' })
  @IsNotEmpty({ message: 'Verification code is required' })
  @Length(6, 6, { message: 'Verification code must be exactly 6 characters' })
  @Matches(/^[0-9]+$/, { message: 'Verification code must contain only numbers' })
  verificationCode: string;
}