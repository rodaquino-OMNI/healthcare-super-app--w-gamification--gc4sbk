name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      packages_changed: ${{ steps.filter.outputs.packages }}
      services_matrix: ${{ steps.set-matrix.outputs.services_matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Filter changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'src/backend/**'
            packages:
              - 'src/backend/packages/**'

      - name: Set build matrix
        id: set-matrix
        if: steps.filter.outputs.backend == 'true'
        run: |
          # Determine which services have changes and need to be built
          SERVICES='["api-gateway", "auth-service", "health-service", "care-service", "plan-service", "gamification-engine", "notification-service"]'
          echo "services_matrix=$SERVICES" >> $GITHUB_OUTPUT

  dependency-validation:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: src/backend
        run: pnpm install --frozen-lockfile

      - name: Validate dependency resolution
        working-directory: src/backend
        run: |
          echo "Checking for missing or conflicting packages..."
          pnpm ls --depth=0
          
          echo "Validating TypeScript project references..."
          npx tsc --build --verbose
          
          echo "Checking for circular dependencies..."
          npx madge --circular --extensions ts,js src/
          
          echo "Validating workspace integrity..."
          pnpm check
        
  build:
    needs: dependency-validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services_matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
            **/build
            **/.next
          key: ${{ runner.os }}-build-${{ matrix.service }}-${{ github.sha }}

      - name: Install dependencies
        working-directory: src/backend
        run: pnpm install --frozen-lockfile

      - name: Build service
        working-directory: src/backend/${{ matrix.service }}
        run: pnpm build
        
      - name: Lint service
        working-directory: src/backend/${{ matrix.service }}
        run: pnpm lint
        
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services_matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
            **/build
            **/.next
          key: ${{ runner.os }}-build-${{ matrix.service }}-${{ github.sha }}

      - name: Install dependencies
        working-directory: src/backend
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        working-directory: src/backend/${{ matrix.service }}
        run: pnpm test:cov
        env:
          JEST_COVERAGE_THRESHOLD_STATEMENTS: 80
          JEST_COVERAGE_THRESHOLD_BRANCHES: 70
          JEST_COVERAGE_THRESHOLD_FUNCTIONS: 80
          JEST_COVERAGE_THRESHOLD_LINES: 80
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.service }}
          path: src/backend/${{ matrix.service }}/coverage
          retention-days: 7
          
  packages-build:
    needs: dependency-validation
    if: needs.detect-changes.outputs.packages_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: src/backend
        run: pnpm install --frozen-lockfile

      - name: Build packages
        working-directory: src/backend
        run: pnpm --filter "./packages/**" build
        
      - name: Lint packages
        working-directory: src/backend
        run: pnpm --filter "./packages/**" lint
        
      - name: Test packages
        working-directory: src/backend
        run: pnpm --filter "./packages/**" test:cov
        env:
          JEST_COVERAGE_THRESHOLD_STATEMENTS: 80
          JEST_COVERAGE_THRESHOLD_BRANCHES: 70
          JEST_COVERAGE_THRESHOLD_FUNCTIONS: 80
          JEST_COVERAGE_THRESHOLD_LINES: 80
          
      - name: Upload package coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-packages
          path: src/backend/packages/*/coverage
          retention-days: 7
          
  coverage-report:
    needs: [test, packages-build]
    if: always() && (needs.test.result == 'success' || needs.packages-build.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'
          
      - name: Install coverage tools
        run: npm install -g nyc
        
      - name: Merge coverage reports
        run: |
          mkdir -p .nyc_output
          find coverage-reports -name 'coverage-final.json' -exec cp {} .nyc_output/ \;
          nyc report --reporter=text --reporter=lcov
          
      - name: Upload merged coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-merged
          path: coverage
          retention-days: 7
          
      - name: Check coverage thresholds
        run: |
          COVERAGE_RESULT=$(nyc check-coverage --lines 80 --functions 80 --branches 70 --statements 80 || echo "FAILED")
          if [ "$COVERAGE_RESULT" == "FAILED" ]; then
            echo "Coverage thresholds not met!"
            exit 1
          fi
          
  security-scan:
    needs: dependency-validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.15.0'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x
          
      - name: Run npm audit
        working-directory: src/backend
        run: pnpm audit --audit-level=high
        continue-on-error: true
        
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AUSTA-Backend'
          path: 'src/backend'
          format: 'HTML'
          out: 'reports'
          args: >-
            --failOnCVSS 7
            --enableRetired
            
      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports
          retention-days: 7