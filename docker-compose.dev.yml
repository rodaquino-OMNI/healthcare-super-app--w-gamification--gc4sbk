version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./src/backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./src/backend/api-gateway:/app
      - node_modules_api_gateway:/app/node_modules
    depends_on:
      - auth-service
      - health-service
      - care-service
      - plan-service
      - gamification-engine
      - dev-proxy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/api-gateway
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-secret-key
      PORT: 4000
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: ./src/backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    volumes:
      - ./src/backend/auth-service:/app
      - node_modules_auth:/app/node_modules
    depends_on:
      - db
      - redis
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/auth-service
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-secret-key
      PORT: 4001
      LOG_LEVEL: debug
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Health Journey Service
  health-service:
    build:
      context: ./src/backend/health-service
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    volumes:
      - ./src/backend/health-service:/app
      - node_modules_health:/app/node_modules
    depends_on:
      - db
      - redis
      - kafka
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/health-service
      REDIS_URL: redis://redis:6379
      PORT: 4002
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
      JOURNEY_NAME: health
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Care Journey Service
  care-service:
    build:
      context: ./src/backend/care-service
      dockerfile: Dockerfile
    ports:
      - "4003:4003"
    volumes:
      - ./src/backend/care-service:/app
      - node_modules_care:/app/node_modules
    depends_on:
      - db
      - redis
      - kafka
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/care-service
      REDIS_URL: redis://redis:6379
      PORT: 4003
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
      JOURNEY_NAME: care
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Plan Journey Service
  plan-service:
    build:
      context: ./src/backend/plan-service
      dockerfile: Dockerfile
    ports:
      - "4004:4004"
    volumes:
      - ./src/backend/plan-service:/app
      - node_modules_plan:/app/node_modules
    depends_on:
      - db
      - redis
      - kafka
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/plan-service
      REDIS_URL: redis://redis:6379
      PORT: 4004
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
      JOURNEY_NAME: plan
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Gamification Engine
  gamification-engine:
    build:
      context: ./src/backend/gamification-engine
      dockerfile: Dockerfile
    ports:
      - "4005:4005"
    volumes:
      - ./src/backend/gamification-engine:/app
      - node_modules_gamification:/app/node_modules
    depends_on:
      - db
      - redis
      - kafka
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/gamification-engine
      REDIS_URL: redis://redis:6379
      PORT: 4005
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: ./src/backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "4006:4006"
    volumes:
      - ./src/backend/notification-service:/app
      - node_modules_notification:/app/node_modules
    depends_on:
      - db
      - redis
      - kafka
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@db:5432/notification-service
      REDIS_URL: redis://redis:6379
      PORT: 4006
      LOG_LEVEL: debug
      KAFKA_BROKERS: kafka:9092
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Application (Next.js)
  web:
    build:
      context: ./src/web/web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src/web/web:/app
      - node_modules_web:/app/node_modules
      - ./src/web/design-system:/app/node_modules/@austa/design-system
      - ./src/web/primitives:/app/node_modules/@design-system/primitives
      - ./src/web/interfaces:/app/node_modules/@austa/interfaces
      - ./src/web/journey-context:/app/node_modules/@austa/journey-context
    depends_on:
      - dev-proxy
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: http://localhost:80/api
      NEXT_PUBLIC_WS_URL: ws://localhost:80/ws
      PORT: 3000
      LOG_LEVEL: debug
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mobile Application (React Native)
  mobile:
    build:
      context: ./src/web/mobile
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./src/web/mobile:/app
      - node_modules_mobile:/app/node_modules
      - ./src/web/design-system:/app/node_modules/@austa/design-system
      - ./src/web/primitives:/app/node_modules/@design-system/primitives
      - ./src/web/interfaces:/app/node_modules/@austa/interfaces
      - ./src/web/journey-context:/app/node_modules/@austa/journey-context
    depends_on:
      - dev-proxy
    environment:
      NODE_ENV: development
      RN_API_BASE_URL: http://localhost:80/api
      RN_WS_URL: ws://localhost:80/ws
      PORT: 8081
      LOG_LEVEL: debug
    restart: unless-stopped

  # Development Proxy (Nginx)
  dev-proxy:
    build:
      context: ./infrastructure/docker/dev-proxy
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    environment:
      API_GATEWAY_URL: http://api-gateway:4000
      AUTH_SERVICE_URL: http://auth-service:4001
      HEALTH_SERVICE_URL: http://health-service:4002
      CARE_SERVICE_URL: http://care-service:4003
      PLAN_SERVICE_URL: http://plan-service:4004
      GAMIFICATION_ENGINE_URL: http://gamification-engine:4005
      NOTIFICATION_SERVICE_URL: http://notification-service:4006
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Database Seed Service
  db-seed:
    build:
      context: ./infrastructure/docker/db
      dockerfile: Dockerfile
    volumes:
      - ./infrastructure/docker/db:/app
      - ./src/backend/health-service/prisma:/app/prisma/health-service
      - ./src/backend/care-service/prisma:/app/prisma/care-service
      - ./src/backend/plan-service/prisma:/app/prisma/plan-service
      - ./src/backend/gamification-engine/prisma:/app/prisma/gamification-engine
      - ./src/backend/auth-service/prisma:/app/prisma/auth-service
      - ./src/backend/notification-service/prisma:/app/prisma/notification-service
    depends_on:
      - db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: austa
      NODE_ENV: development
    restart: on-failure

  # PostgreSQL Database
  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: austa
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./infrastructure/docker/db/postgres-env.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d austa"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.2.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  db_data:
  redis_data:
  node_modules_api_gateway:
  node_modules_auth:
  node_modules_health:
  node_modules_care:
  node_modules_plan:
  node_modules_gamification:
  node_modules_notification:
  node_modules_web:
  node_modules_mobile: