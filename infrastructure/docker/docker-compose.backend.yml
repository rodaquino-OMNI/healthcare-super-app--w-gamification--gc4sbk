version: '3.8'

# Specialized Docker Compose configuration for backend services
# Can be used standalone or composed with the main file

services:
  api-gateway:
    image: austa-api-gateway:latest
    container_name: api-gateway
    build:
      context: ../../
      dockerfile: src/backend/api-gateway/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      API_URL: http://localhost:3000
      AUTH_SERVICE_URL: http://auth-service:3001
      HEALTH_SERVICE_URL: http://health-service:3002
      CARE_SERVICE_URL: http://care-service:3003
      PLAN_SERVICE_URL: http://plan-service:3004
      GAMIFICATION_ENGINE_URL: http://gamification-engine:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ../../src/backend/api-gateway:/app/src/backend/api-gateway
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - api_gateway_node_modules:/app/src/backend/api-gateway/node_modules
    depends_on:
      auth-service:
        condition: service_healthy
      health-service:
        condition: service_healthy
      care-service:
        condition: service_healthy
      plan-service:
        condition: service_healthy
      gamification-engine:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - austa-network

  auth-service:
    image: austa-auth-service:latest
    container_name: auth-service
    build:
      context: ../../
      dockerfile: src/backend/auth-service/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=auth
      JWT_SECRET: secret
      JWT_EXPIRATION: 3600
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: debug
    volumes:
      - ../../src/backend/auth-service:/app/src/backend/auth-service
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - auth_service_node_modules:/app/src/backend/auth-service/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  health-service:
    image: austa-health-service:latest
    container_name: health-service
    build:
      context: ../../
      dockerfile: src/backend/health-service/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=health
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      LOG_LEVEL: debug
    volumes:
      - ../../src/backend/health-service:/app/src/backend/health-service
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - health_service_node_modules:/app/src/backend/health-service/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  care-service:
    image: austa-care-service:latest
    container_name: care-service
    build:
      context: ../../
      dockerfile: src/backend/care-service/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=care
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      LOG_LEVEL: debug
    volumes:
      - ../../src/backend/care-service:/app/src/backend/care-service
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - care_service_node_modules:/app/src/backend/care-service/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  plan-service:
    image: austa-plan-service:latest
    container_name: plan-service
    build:
      context: ../../
      dockerfile: src/backend/plan-service/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=plan
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      LOG_LEVEL: debug
    volumes:
      - ../../src/backend/plan-service:/app/src/backend/plan-service
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - plan_service_node_modules:/app/src/backend/plan-service/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  gamification-engine:
    image: austa-gamification-engine:latest
    container_name: gamification-engine
    build:
      context: ../../
      dockerfile: src/backend/gamification-engine/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=gamification
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      LOG_LEVEL: debug
      EVENT_SCHEMA_VALIDATION: "true"
    volumes:
      - ../../src/backend/gamification-engine:/app/src/backend/gamification-engine
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - gamification_engine_node_modules:/app/src/backend/gamification-engine/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  notification-service:
    image: austa-notification-service:latest
    container_name: notification-service
    build:
      context: ../../
      dockerfile: src/backend/notification-service/Dockerfile
      args:
        NODE_ENV: development
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa?schema=notification
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      LOG_LEVEL: debug
      RETRY_ENABLED: "true"
      DLQ_ENABLED: "true"
    volumes:
      - ../../src/backend/notification-service:/app/src/backend/notification-service
      - ../../src/backend/packages:/app/src/backend/packages
      - ../../src/backend/shared:/app/src/backend/shared
      - notification_service_node_modules:/app/src/backend/notification-service/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - austa-network

  # Database services
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: austa
      POSTGRES_PASSWORD: austa
      POSTGRES_DB: austa
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../infrastructure/docker/db/init-schemas.sql:/docker-entrypoint-initdb.d/init-schemas.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U austa"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - austa-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # Event streaming services
  kafka:
    image: confluentinc/cp-kafka:7.2.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - austa-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # Development utilities
  db-seed:
    image: austa-db-seed:latest
    container_name: db-seed
    build:
      context: ../../
      dockerfile: infrastructure/docker/db/Dockerfile.seed
    environment:
      DATABASE_URL: postgresql://austa:austa@postgres:5432/austa
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - austa-network

  dependency-validator:
    image: austa-dependency-validator:latest
    container_name: dependency-validator
    build:
      context: ../../
      dockerfile: infrastructure/docker/scripts/Dockerfile.validator
    volumes:
      - ../../src/backend:/app/src/backend
      - ../../package.json:/app/package.json
      - ../../yarn.lock:/app/yarn.lock
    environment:
      NODE_ENV: development
      VALIDATE_PACKAGES: "true"
      VALIDATE_WORKSPACES: "true"
    networks:
      - austa-network

networks:
  austa-network:
    driver: bridge

volumes:
  postgres_data:
  api_gateway_node_modules:
  auth_service_node_modules:
  health_service_node_modules:
  care_service_node_modules:
  plan_service_node_modules:
  gamification_engine_node_modules:
  notification_service_node_modules: