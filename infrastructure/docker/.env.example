# AUSTA SuperApp - Environment Configuration
# =========================================
#
# This file serves as a template for creating your own .env file for local development.
# Copy this file to .env in the same directory and update the values as needed.
#
# IMPORTANT: This file contains example values suitable for local development only.
# Never commit your actual .env file to version control or use these values in production.
#
# For more information on environment configuration, see the documentation at:
# docs/environment-configuration.md

# =============================================================================
# GENERAL SETTINGS
# =============================================================================

# Application environment (development, staging, production)
# Controls logging verbosity, error details, and optimization settings
NODE_ENV=development

# Logging level (debug, info, warn, error)
# Controls the verbosity of application logs
LOG_LEVEL=debug

# Application version and build information
APP_VERSION=0.1.0 # Application version
BUILD_NUMBER=local # Build number or identifier
COMMIT_HASH=development # Git commit hash

# Monitoring and observability
ENABLE_METRICS=true # Enable Prometheus metrics collection
METRICS_PORT=9090 # Port for Prometheus metrics endpoint
ENABLE_TRACING=true # Enable distributed tracing
TRACING_EXPORTER=jaeger # Tracing exporter (jaeger, zipkin)
TRACING_ENDPOINT=http://jaeger:14268/api/traces # Tracing collector endpoint

# Error reporting
SENTRY_DSN= # Sentry DSN for error reporting (leave empty to disable)
SENTRY_ENVIRONMENT=development # Sentry environment
SENTRY_TRACES_SAMPLE_RATE=1.0 # Sentry traces sample rate (0.0-1.0)

# =============================================================================
# DATABASE SETTINGS
# =============================================================================

# PostgreSQL connection settings
# Used by all services to connect to their respective database schemas
DB_HOST=postgres
DB_PORT=5432
DB_USER=austa
DB_PASSWORD=austa
DB_NAME=austa

# Database connection string template
# Individual services will use this with their specific schema
# Example: postgresql://austa:austa@postgres:5432/austa?schema=auth
DATABASE_URL_TEMPLATE=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=

# =============================================================================
# REDIS SETTINGS
# =============================================================================

# Redis connection settings
# Used for caching, session storage, and pub/sub messaging
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=

# Redis connection string template
# Example: redis://redis:6379
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}

# =============================================================================
# KAFKA SETTINGS
# =============================================================================

# Kafka connection settings
# Used for event streaming between services
KAFKA_BROKERS=kafka:9092
KAFKA_BROKER_ID=1
KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181

# Kafka listener configuration
KAFKA_LISTENERS=PLAINTEXT://:9092
KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

# Zookeeper settings
ZOOKEEPER_CLIENT_PORT=2181
ZOOKEEPER_TICK_TIME=2000

# Kafka topic configuration
KAFKA_AUTO_CREATE_TOPICS=true # Automatically create topics if they don't exist
KAFKA_TOPIC_PARTITIONS=3 # Default number of partitions for new topics
KAFKA_TOPIC_REPLICATION=1 # Default replication factor for new topics (use 3 in production)

# Kafka consumer configuration
KAFKA_CONSUMER_GROUP_ID=austa-consumers # Default consumer group ID
KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest # Auto offset reset (earliest, latest)
KAFKA_CONSUMER_ENABLE_AUTO_COMMIT=true # Enable auto commit
KAFKA_CONSUMER_AUTO_COMMIT_INTERVAL=5000 # Auto commit interval in milliseconds

# Kafka producer configuration
KAFKA_PRODUCER_ACKS=all # Acknowledgment level (0, 1, all)
KAFKA_PRODUCER_RETRIES=3 # Number of retries
KAFKA_PRODUCER_RETRY_BACKOFF=100 # Retry backoff in milliseconds

# Kafka event schema settings
KAFKA_SCHEMA_REGISTRY_URL= # Schema registry URL (leave empty to disable)
KAFKA_SCHEMA_VALIDATION=false # Enable schema validation

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# JWT configuration
# Used for authentication and authorization
JWT_SECRET=your-secret-key-change-in-production # REQUIRED: Change this in production!
JWT_EXPIRATION=86400 # 24 hours in seconds
JWT_REFRESH_EXPIRATION=604800 # 7 days in seconds
JWT_ISSUER=austa-superapp # Issuer claim for JWT tokens
JWT_AUDIENCE=austa-users # Audience claim for JWT tokens

# CORS configuration
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8081 # Comma-separated list of allowed origins
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS # Comma-separated list of allowed methods
CORS_ALLOWED_HEADERS=Content-Type,Authorization # Comma-separated list of allowed headers
CORS_ALLOW_CREDENTIALS=true # Allow credentials (cookies, authorization headers)

# Rate limiting
RATE_LIMIT_WINDOW=60000 # Time window in milliseconds (1 minute)
RATE_LIMIT_MAX_REQUESTS=100 # Maximum number of requests per window
RATE_LIMIT_ENABLED=true # Enable/disable rate limiting

# =============================================================================
# API GATEWAY SERVICE
# =============================================================================

# API Gateway service configuration
API_GATEWAY_PORT=3000
API_GATEWAY_HOST=api-gateway
API_URL=http://localhost:${API_GATEWAY_PORT}

# =============================================================================
# AUTH SERVICE
# =============================================================================

# Auth service configuration
AUTH_SERVICE_PORT=3001
AUTH_SERVICE_HOST=auth-service
AUTH_SERVICE_URL=http://${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT}
AUTH_DATABASE_URL=${DATABASE_URL_TEMPLATE}auth

# =============================================================================
# HEALTH SERVICE
# =============================================================================

# Health service configuration
HEALTH_SERVICE_PORT=3002
HEALTH_SERVICE_HOST=health-service
HEALTH_SERVICE_URL=http://${HEALTH_SERVICE_HOST}:${HEALTH_SERVICE_PORT}
HEALTH_DATABASE_URL=${DATABASE_URL_TEMPLATE}health

# =============================================================================
# CARE SERVICE
# =============================================================================

# Care service configuration
CARE_SERVICE_PORT=3003
CARE_SERVICE_HOST=care-service
CARE_SERVICE_URL=http://${CARE_SERVICE_HOST}:${CARE_SERVICE_PORT}
CARE_DATABASE_URL=${DATABASE_URL_TEMPLATE}care

# =============================================================================
# PLAN SERVICE
# =============================================================================

# Plan service configuration
PLAN_SERVICE_PORT=3004
PLAN_SERVICE_HOST=plan-service
PLAN_SERVICE_URL=http://${PLAN_SERVICE_HOST}:${PLAN_SERVICE_PORT}
PLAN_DATABASE_URL=${DATABASE_URL_TEMPLATE}plan

# =============================================================================
# GAMIFICATION ENGINE
# =============================================================================

# Gamification engine configuration
GAMIFICATION_ENGINE_PORT=3005
GAMIFICATION_ENGINE_HOST=gamification-engine
GAMIFICATION_ENGINE_URL=http://${GAMIFICATION_ENGINE_HOST}:${GAMIFICATION_ENGINE_PORT}
GAMIFICATION_DATABASE_URL=${DATABASE_URL_TEMPLATE}gamification

# Gamification event settings
GAMIFICATION_EVENT_TOPIC=gamification-events # Kafka topic for gamification events
GAMIFICATION_EVENT_GROUP=gamification-consumers # Consumer group for gamification events

# Achievement settings
ACHIEVEMENT_NOTIFICATION_ENABLED=true # Enable achievement notifications
ACHIEVEMENT_POINTS_MULTIPLIER=1.0 # Multiplier for achievement points

# Leaderboard settings
LEADERBOARD_UPDATE_INTERVAL=3600 # Update interval in seconds (1 hour)
LEADERBOARD_MAX_ENTRIES=100 # Maximum number of entries in leaderboard

# Quest settings
QUEST_AUTO_ENROLL=true # Automatically enroll users in new quests
QUEST_EXPIRY_CHECK_INTERVAL=86400 # Check interval for quest expiry in seconds (1 day)

# =============================================================================
# NOTIFICATION SERVICE
# =============================================================================

# Notification service configuration
NOTIFICATION_SERVICE_PORT=3006
NOTIFICATION_SERVICE_HOST=notification-service
NOTIFICATION_SERVICE_URL=http://${NOTIFICATION_SERVICE_HOST}:${NOTIFICATION_SERVICE_PORT}
NOTIFICATION_DATABASE_URL=${DATABASE_URL_TEMPLATE}notification

# Email provider settings (for notification service)
EMAIL_PROVIDER=smtp # Options: smtp, ses, sendgrid
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=user
SMTP_PASSWORD=password
SMTP_FROM_EMAIL=noreply@austa.com
SMTP_SECURE=true # Use TLS

# AWS SES configuration (if EMAIL_PROVIDER=ses)
AWS_SES_REGION=sa-east-1
AWS_SES_ACCESS_KEY=your-access-key
AWS_SES_SECRET_KEY=your-secret-key
AWS_SES_FROM_EMAIL=noreply@austa.com

# SendGrid configuration (if EMAIL_PROVIDER=sendgrid)
SENDGRID_API_KEY=your-sendgrid-api-key
SENDGRID_FROM_EMAIL=noreply@austa.com

# SMS provider settings (for notification service)
SMS_PROVIDER=twilio # Options: twilio, sns
TWILIO_ACCOUNT_SID=your-account-sid
TWILIO_AUTH_TOKEN=your-auth-token
TWILIO_FROM_NUMBER=+1234567890

# AWS SNS configuration (if SMS_PROVIDER=sns)
AWS_SNS_REGION=sa-east-1
AWS_SNS_ACCESS_KEY=your-access-key
AWS_SNS_SECRET_KEY=your-secret-key

# Push notification settings (for notification service)
PUSH_PROVIDER=fcm # Options: fcm, apns, multi
FCM_API_KEY=your-fcm-api-key
FCM_PROJECT_ID=your-fcm-project-id

# Apple Push Notification Service settings
APNS_KEY_ID=your-apns-key-id
APNS_TEAM_ID=your-apns-team-id
APNS_KEY_PATH=./path/to/apns/key.p8
APNS_PRODUCTION=false # Use production environment

# Notification retry settings
NOTIFICATION_RETRY_ATTEMPTS=3 # Number of retry attempts for failed notifications
NOTIFICATION_RETRY_DELAY=60000 # Delay between retry attempts in milliseconds
NOTIFICATION_DLQ_ENABLED=true # Enable dead letter queue for failed notifications

# =============================================================================
# FRONTEND SETTINGS
# =============================================================================

# Web application (Next.js) configuration
WEB_PORT=3000
NEXT_PUBLIC_API_BASE_URL=http://localhost:${API_GATEWAY_PORT}
NEXT_PUBLIC_WS_URL=ws://localhost:${NOTIFICATION_SERVICE_PORT}
NEXT_PUBLIC_APP_ENV=development # Used for client-side environment detection
NEXT_PUBLIC_ANALYTICS_ID= # Analytics tracking ID (leave empty to disable)
NEXT_PUBLIC_SENTRY_DSN= # Sentry DSN for error tracking (leave empty to disable)

# Mobile application (React Native) configuration
MOBILE_PORT=8081
MOBILE_PLATFORM=android # Default platform for development (android, ios)
RN_API_BASE_URL=http://localhost:${API_GATEWAY_PORT}
RN_WS_URL=ws://localhost:${NOTIFICATION_SERVICE_PORT}
RN_APP_ENV=development # Used for client-side environment detection
RN_ANALYTICS_ID= # Analytics tracking ID (leave empty to disable)
RN_SENTRY_DSN= # Sentry DSN for error tracking (leave empty to disable)

# Feature flags for frontend applications
FEATURE_HEALTH_JOURNEY=true # Enable health journey features
FEATURE_CARE_JOURNEY=true # Enable care journey features
FEATURE_PLAN_JOURNEY=true # Enable plan journey features
FEATURE_GAMIFICATION=true # Enable gamification features
FEATURE_NOTIFICATIONS=true # Enable notification features
FEATURE_OFFLINE_MODE=true # Enable offline mode support

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================

# The following variables are used by the environment validation script
# to ensure all required variables are set before starting services

# Required variables for all services
REQUIRED_VARS=NODE_ENV,LOG_LEVEL,DB_HOST,DB_PORT,DB_USER,DB_PASSWORD,DB_NAME,REDIS_HOST,REDIS_PORT,JWT_SECRET

# Service-specific required variables
API_GATEWAY_REQUIRED_VARS=API_GATEWAY_PORT,AUTH_SERVICE_URL,HEALTH_SERVICE_URL,CARE_SERVICE_URL,PLAN_SERVICE_URL,GAMIFICATION_ENGINE_URL
AUTH_SERVICE_REQUIRED_VARS=AUTH_SERVICE_PORT,AUTH_DATABASE_URL,JWT_SECRET,JWT_EXPIRATION
HEALTH_SERVICE_REQUIRED_VARS=HEALTH_SERVICE_PORT,HEALTH_DATABASE_URL,KAFKA_BROKERS
CARE_SERVICE_REQUIRED_VARS=CARE_SERVICE_PORT,CARE_DATABASE_URL,KAFKA_BROKERS
PLAN_SERVICE_REQUIRED_VARS=PLAN_SERVICE_PORT,PLAN_DATABASE_URL,KAFKA_BROKERS
GAMIFICATION_ENGINE_REQUIRED_VARS=GAMIFICATION_ENGINE_PORT,GAMIFICATION_DATABASE_URL,KAFKA_BROKERS
NOTIFICATION_SERVICE_REQUIRED_VARS=NOTIFICATION_SERVICE_PORT,NOTIFICATION_DATABASE_URL,KAFKA_BROKERS

# Environment validation script configuration
# These settings control how the validation script behaves
VALIDATION_FAIL_ON_MISSING=true # Fail if any required variable is missing
VALIDATION_CHECK_CONNECTIONS=true # Test database and service connections
VALIDATION_TIMEOUT=30 # Connection test timeout in seconds

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================

# Enable/disable development tools and features
ENABLE_SWAGGER=true # Enable Swagger UI for API documentation
ENABLE_GRAPHQL_PLAYGROUND=true # Enable GraphQL Playground
ENABLE_DEBUG_LOGGING=true # Enable detailed debug logging

# Hot reload settings
WATCH_MODE=true # Enable file watching for hot reload
POLL_INTERVAL=1000 # File polling interval in milliseconds (for environments where inotify doesn't work)

# Development proxy configuration
DEV_PROXY_PORT=8000 # Port for the development proxy
DEV_PROXY_API_TARGET=http://api-gateway:3000 # Target for API requests
DEV_PROXY_WS_TARGET=http://notification-service:3006 # Target for WebSocket requests

# Database seeding
SEED_DATABASE=true # Automatically run database seeds on startup
SEED_ADMIN_EMAIL=admin@austa.com # Default admin user email
SEED_ADMIN_PASSWORD=adminpassword # Default admin user password (change this!)
SEED_TEST_DATA=true # Include test data in database seeds

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# To use this file:
# 1. Copy this file to .env in the same directory:
#    cp .env.example .env
# 
# 2. Update the values as needed for your local development environment
#    - Required variables are marked with comments
#    - Default values are provided for local development only
#
# 3. Run the environment validation script to ensure all required variables are set:
#    ./scripts/validate-env.sh
#    - This script will check for missing variables
#    - It will also test connections to required services
#    - The script will provide detailed error messages if validation fails
#
# 4. Start the services with docker-compose:
#    docker-compose -f docker-compose.dev.yml up
#    - Use -d flag to run in detached mode
#    - Use --build flag to rebuild containers if needed

# For production deployments:
# - Never use these default values in production
# - Use a secure method to manage secrets (e.g., AWS Secrets Manager, Kubernetes Secrets)
# - Ensure all passwords, tokens, and keys are strong and unique
# - Consider using environment-specific .env files (.env.production, .env.staging)
# - Implement proper secret rotation procedures

# Troubleshooting:
# - If services fail to start, check the logs for error messages
# - Ensure all required services (PostgreSQL, Redis, Kafka) are running
# - Verify that ports are not already in use by other applications
# - Run the validation script with debug flag for more information:
#   DEBUG=true ./scripts/validate-env.sh