version: '3.8'

# Infrastructure services for AUSTA SuperApp local development
# This file contains all the infrastructure services required by the application
# including databases, caching, message brokers, and monitoring tools.

services:
  # PostgreSQL database service
  postgres:
    image: postgres:14
    container_name: austa-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: austa
      POSTGRES_PASSWORD: austa
      POSTGRES_DB: austa
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount initialization scripts
      - ./db/init.sh:/docker-entrypoint-initdb.d/01-init.sh:ro
      - ./db/create-databases.sql:/docker-entrypoint-initdb.d/02-create-databases.sql:ro
      - ./db/enable-extensions.sql:/docker-entrypoint-initdb.d/03-enable-extensions.sql:ro
      - ./db/create-users.sql:/docker-entrypoint-initdb.d/04-create-users.sql:ro
      # Mount configuration
      - ./db/postgres-env.conf:/etc/postgresql/postgresql.conf:ro
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U austa"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - austa-network

  # Redis cache service
  redis:
    image: redis:7
    container_name: austa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - austa-network

  # ZooKeeper service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    container_name: austa-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s
    networks:
      - austa-network

  # Kafka message broker service
  kafka:
    image: confluentinc/cp-kafka:7.2.0
    container_name: austa-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Create default topics for the application
      KAFKA_CREATE_TOPICS: "health-events:3:1,care-events:3:1,plan-events:3:1,gamification-events:3:1,notification-events:3:1"
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - austa-network

  # Database initialization and seeding service
  db-init:
    image: postgres:14
    container_name: austa-db-init
    volumes:
      - ./db/wait-for-db.sh:/wait-for-db.sh:ro
      - ./db/migrations.sh:/migrations.sh:ro
      - ./db/seed-data.sh:/seed-data.sh:ro
      - ./db/auth-seed.sql:/auth-seed.sql:ro
      - ./db/gamification-seed.sql:/gamification-seed.sql:ro
      - ./db/health-journey-seed.sql:/health-journey-seed.sql:ro
      - ./db/care-journey-seed.sql:/care-journey-seed.sql:ro
      - ./db/plan-journey-seed.sql:/plan-journey-seed.sql:ro
      # Mount the backend directory to access Prisma migrations
      - ../../src/backend:/src/backend:ro
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: austa
      POSTGRES_PASSWORD: austa
      POSTGRES_DB: austa
    command: ["/bin/bash", "-c", "/wait-for-db.sh && /migrations.sh && /seed-data.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - austa-network

  # Development proxy for service communication
  dev-proxy:
    build:
      context: ./dev-proxy
      dockerfile: Dockerfile
    container_name: austa-dev-proxy
    ports:
      - "80:80"
    environment:
      API_GATEWAY_URL: http://api-gateway:3000
      AUTH_SERVICE_URL: http://auth-service:3001
      HEALTH_SERVICE_URL: http://health-service:3002
      CARE_SERVICE_URL: http://care-service:3003
      PLAN_SERVICE_URL: http://plan-service:3004
      GAMIFICATION_ENGINE_URL: http://gamification-engine:3005
      NOTIFICATION_SERVICE_URL: http://notification-service:3006
      WEB_APP_URL: http://web:3000
      MOBILE_APP_URL: http://mobile:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - austa-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: austa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - austa-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:9.3.0
    container_name: austa-grafana
    ports:
      - "3100:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - prometheus
    networks:
      - austa-network

networks:
  austa-network:
    driver: bridge

volumes:
  postgres_data:
    name: austa-postgres-data
  redis_data:
    name: austa-redis-data
  zookeeper_data:
    name: austa-zookeeper-data
  zookeeper_log:
    name: austa-zookeeper-log
  kafka_data:
    name: austa-kafka-data
  prometheus_data:
    name: austa-prometheus-data
  grafana_data:
    name: austa-grafana-data