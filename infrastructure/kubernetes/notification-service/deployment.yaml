apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  labels:
    app: notification-service
    tier: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: notification-service
        image: ${ECR_REPOSITORY}/notification-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 3001
          name: websocket
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: WEBSOCKET_PORT
          value: "3001"
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: database-url
        # Redis configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: redis-port
        # Kafka configuration
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: kafka-brokers
        - name: KAFKA_CLIENT_ID
          value: "notification-service"
        - name: KAFKA_CONSUMER_GROUP
          value: "notification-service-group"
        # JWT configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: jwt-secret
        - name: JWT_EXPIRATION
          value: "1d"
        # Email configuration
        - name: EMAIL_PROVIDER
          value: "ses"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: aws-region
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: aws-secret-access-key
        - name: EMAIL_FROM
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: email-from
        # Push notifications configuration
        - name: FIREBASE_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: firebase-project-id
        - name: FIREBASE_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: firebase-private-key
        - name: FIREBASE_CLIENT_EMAIL
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: firebase-client-email
        # SMS configuration
        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: twilio-account-sid
        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: notification-service-secrets
              key: twilio-auth-token
        - name: TWILIO_PHONE_NUMBER
          valueFrom:
            configMapKeyRef:
              name: notification-service-config
              key: twilio-phone-number
        # Rate limiting configuration
        - name: THROTTLE_TTL
          value: "60"
        - name: THROTTLE_LIMIT
          value: "10"
        # Retry configuration
        - name: RETRY_MAX_ATTEMPTS
          value: "5"
        - name: RETRY_INITIAL_DELAY_MS
          value: "1000"
        - name: RETRY_MAX_DELAY_MS
          value: "60000"
        - name: RETRY_BACKOFF_MULTIPLIER
          value: "2"
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/startup
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12 # Allow 2 minutes (12 * 10s) for startup
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - notification-service
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 60